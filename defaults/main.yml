---
# defaults file for install-kubernetes
kubernetes:
  packages:
    - kubectl
    - kubeadm
    - kubelet
    - kubernetes-cni
    - etcd-client
  pre_packages:
    - apt-transport-https
    - ca-certificates
    - curl
    - gnupg
    - jq              # below packages not required for kubernetes, but longhorn needs them for pre check
    - open-iscsi
    - nfs-common
  kubeadm_config_file_path: '/etc/kubernetes/kubeadm-kubelet-config.yaml'
  init_configuration:
    localAPIEndpoint:
      advertiseAddress: "{{ kubernetes_apiserver_advertise_address | default(ansible_default_ipv4.address, true) }}"
      bindPort: 6443
    nodeRegistration:
      criSocket: "{{ container_runtime_endpoint | default('unix:///var/run/crio/crio.sock', true) }}"
  cluster_configuration:
    controlPlaneEndpoint: "k8s.dev.bestdavid.me:8643"
    certificatesDir: "/etc/kubernetes/pki" # [renew](https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-certs/)
    networking:
      podSubnet: "{{ kubernetes_pod_network.cidr }}"
    cgroupDriver: "systemd"
    apiServer:
      certSANs:
        - k8s.dev.bestdavid.me
    # etcd config will be generated in control-plane-setup.yml when etcd in HA mode
  allow_pods_on_control_plane: "{{ allow_pods_on_control_plane | default(false, true) }}"
etcd:
  kubelet_config_drop_in_location: '/etc/systemd/system/kubelet.service.d'
  etcd_config_file_path: '/etc/kubernetes/etcd-kubelet-config.yaml'
  init_configuration:
    nodeRegistration:
      name: "{{ ansible_hostname }}"
    localAPIEndpoint:
      advertiseAddress: "{{ ansible_default_ipv4.address }}"
  cluster_configuration:
    etcd:
        local:
            serverCertSANs:
              - "{{ ansible_default_ipv4.address }}"
            peerCertSANs:
              - "{{ ansible_default_ipv4.address }}"
            extraArgs:
              - name: initial-cluster
                value: "{{ etcd_endpoints }}" # the var will be set by set_fact in etcd-setup.yml
              - name: initial-cluster-state
                value: new
              - name: name
                value: "{{ ansible_hostname }}"
              - name: listen-peer-urls
                value: "https://{{ ansible_default_ipv4.address }}:2380"
              - name: listen-client-urls
                value: "https://{{ ansible_default_ipv4.address }}:2379"
              - name: advertise-client-urls
                value: "https://{{ ansible_default_ipv4.address }}:2379"
              - name: initial-advertise-peer-urls
                value: "https://{{ ansible_default_ipv4.address }}:2380"
  kubelet_configuration:
    authentication:
      anonymous:
        enabled: false
      webhook:
        enabled: false
    authorization:
      mode: AlwaysAllow
    cgroupDriver: systemd
    address: 127.0.0.1
    containerRuntimeEndpoint: "{{ container_runtime_endpoint | default('unix:///var/run/crio/crio.sock', true) }}"
    staticPodPath: /etc/kubernetes/manifests
haproxy:
  frontend:
    apiserver:
      bind: 8643
  backend:
    apiserverbackend:
      servers: >
        {% for host in groups['control-plane'] %}
        server {{ hostvars[host]['inventory_hostname'] }} {{ host }}:{{ kubernetes.init_configuration.localAPIEndpoint.bindPort }} check verify none\n
        {% endfor %}
  listen:
    stats:
      auth:
        user: 'admin'
        password: 'password'
kubernetes_apiserver_advertise_address: ''
container_runtime_endpoint: ''
kubernetes_pod_network:
  cni: 'flannel'
  cidr: '10.244.0.0/16'
  manifest_file: 'https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml'
include_docker_volume_netshare: false
