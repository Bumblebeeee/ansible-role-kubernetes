---
- include_tasks: init.yml

- name: Install Kubernetes packages.
  # environment:
  #   DEBIAN_FRONTEND: noninteractive
  apt:
    name: "{{ kubernetes.packages }}"
    state: present
    update_cache: yes
    install_recommends: false
  notify: restart kubelet

- name: Ensure br_netfilter module is loaded
  ansible.builtin.shell: >
    modprobe br_netfilter

- name: Enable br_netfilter persistently
  ansible.builtin.sysctl:
    name: "{{ item }}"
    value: 1
    state: present
    sysctl_set: true
  loop:
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-ip6tables
    - net.ipv4.ip_forward

- name: Check if Kubernetes has already been initialized.
  stat:
    path: /etc/kubernetes/admin.conf
  register: kubernetes_init_stat

# - name: display kubernetes_init_stat
#   debug:
#     var: kubernetes_init_stat

- name: Check if etcd CA key already exists
  stat:
    path: /etc/kubernetes/pki/etcd/ca.key
  when:
    - groups['etcd'] | default([], true) | count >= 3
  register: etcd_ca_key_stat

- name: Initialize Kubernetes control plane with kubeadm init
  command: >
    kubeadm init phase certs etcd-ca
  register: kubeadmin_init
  when:
    - not kubernetes_init_stat.stat.exists
    - groups['etcd'] | default([], true) | count >= 3
    - inventory_hostname == groups['control-plane'][0]
    - not etcd_ca_key_stat.stat.exists

- include_tasks: etcd-setup.yml
  when: 
    - inventory_hostname in (groups['etcd'] | default([], true))
    - groups['etcd'] | default([], true) | count >= 3

- include_tasks: control-plane-setup.yml
  when: inventory_hostname in groups['control-plane']

# # Set up nodes.
# - name: Get the kubeadm join command from the Kubernetes control plane.
#   command: kubeadm token create --print-join-command
#   changed_when: false
#   when: inventory_hostname in groups['control-plane']
#   register: kubernetes_join_command_result

# # # - name: display kubernetes_init_stat
# # #   debug:
# # #     var: kubernetes_join_command_result

# # # - name: AAAAAAA
# # #   debug:
# # #     var: groups['kube-node']

# - name: Set the kubeadm join command globally.
#   set_fact:
#     kubernetes_join_command: >
#       {{ kubernetes_join_command_result.stdout }} --cri-socket {{ kubernetes.init_configuration.nodeRegistration.criSocket }}
#   when: kubernetes_join_command_result.stdout is defined
#   delegate_to: "{{ item }}"
#   delegate_facts: true
#   with_items: "{{ groups['kube-node'] }}"

# - include_tasks: node-setup.yml
#   when: kubernetes_role == 'node'

####################################################################

# - name: Add Kubernetes's official GPG key
#   apt_key:
#     url: https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key
#     state: present

# - name: Set up the stable repository
#   apt_repository:
#     repo: "deb https://apt.kubernetes.io/ kubernetes-xenial main"
#     state: present

# - name: Install the latest version of kubectl kubeadm kubelet
#   apt:
#     name: "{{ packages }}"
#     state: present
#     update_cache: yes

# - name: Create docker service directory for systemd
#   file:
#     path: /etc/systemd/system/docker.service.d
#     state: directory

# - name: Set up the Docker daemon
#   copy: 
#     src: "{{ role_path }}/files/daemon.json"
#     dest: /etc/docker/daemon.json

# - name: Starting service
#   systemd:
#     daemon_reload: yes
#     name: docker
#     state: restarted

# - name: install boto3 
#   pip:
#     name: boto3

# - name: Download Kubernetes CA
#   aws_s3:
#     bucket: davids-kubernetes-cluster
#     object: "{{ item }}"
#     dest: /data/kube_certs/{{ item }}
#     mode: get
#     profile: david_s3
#   with_items:
#     - ca.key
#     - ca.crt


# #docker plugin install --grant-all-permissions vieux/sshfs




# ctr run -d  \
#   --runtime io.containerd.runc.v2 \
#   quay.io/coreos/etcd:v3.5.0 \
#   /usr/local/bin/etcd \
#   --listen-peer-urls https://0.0.0.0:2380 \
#   --listen-client-urls https://0.0.0.0:2379 \
#   --advertise-client-urls https://192.168.0.211:2379 \
#   --initial-cluster etcd0=https://192.168.0.211:2380 \
#   --initial-cluster-token etcd-cluster-1 \
#   --initial-cluster-state new \
#   --data-dir /etcd-data
